@page "/articles"
@using System.Diagnostics;
@inject IArticleController ArticleController
@inject IAutorController AutorController
@inject IJSRuntime JSRuntime


<div class="container">

    <DropDownComponent Title="Показать записей" QuantityPerPage="quantityPerPage" DDItem="DDItem"
                       SetQuantityPerPage="SetQuantityPerPage"></DropDownComponent>

    <h3>Статьи @((currentPage - 1) * quantityPerPage + 1) - @((currentPage * quantityPerPage < count) ? currentPage * quantityPerPage : count) из @count</h3>

    <p>Страница @currentPage из @totalPagesQuantity</p>
    <p>Время получения запроса: @elapsed ms</p>
    <p>
        Параметры запроса: <br />
        currentPage = @currentPage<br />
        totalPagesQuantity = @totalPagesQuantity<br />
        quantityPerPage = @quantityPerPage<br />
        columnName = @columnName<br />
        sortColumnName = @sortColumnName<br />
        direction = @direction<br />
    </p>

    <Pagination TotalPagesQuantity="totalPagesQuantity" CurrentPage="currentPage" Radius="3"
                SelectedPage="SelectedPage"></Pagination>

    <table class="table table-hover">
        <thead class="thead-dark">
            <tr>
                <th scope="col" @onclick="@(()=>OrderByColumn("ID"))">
                    ID
                    <span class="oi @((sortColumnName == "ID") ? ((direction == "ASC") ? "oi-sort-ascending" : "oi-sort-descending") : null)"></span>
                </th>
                <th scope="col" @onclick="@(()=>OrderByColumn("Title"))">
                    Название
                    <span class="oi @((sortColumnName == "Title") ? ((direction == "ASC") ? "oi-sort-ascending" : "oi-sort-descending") : null)"></span>
                </th>
                <th scope="col" @onclick="@(()=>OrderByColumn("Autor"))">
                    Автор
                    <span class="oi @((sortColumnName == "Autor") ? ((direction == "ASC") ? "oi-sort-ascending" : "oi-sort-descending") : null)"></span>
                </th>
                <th scope="col">Удаление</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in result)
            {
                <tr>
                    <th scope="row">@item.ID</th>
                    <td><a href="/article/@item.ID">@item.Title</a></td>
                    <td>@item.Autor</td>
                    <td @onclick="@(()=>Delete(item.ID))"><button type="button" class="btn btn-link">Удалить</button></td>

                </tr>
            }
        </tbody>
    </table>

</div>

@code {
    private List<Article> articleList;
    private List<Autor> autorList;
    private int[] DDItem = { 5, 10, 50, 100 };
    private string columnName = "ID";
    private static int quantityPerPage = 5;
    private static string sortColumnName;
    private static string direction = "ASC";
    private int count;
    private static int totalPagesQuantity;
    //private static int beginPage = 1;
    private static int currentPage = 1;
    private IEnumerable<PageDataSet> result;
    private long elapsed = 0;

    public class PageDataSet
    {
        public int ID { get; set; }
        public string Title { get; set; }
        public string Autor { get; set; }

    }

    protected override async Task OnInitializedAsync()
    {
        await LoadResult(currentPage, quantityPerPage, columnName, direction);

    }

    private async Task SetQuantityPerPage(int q)
    {
        currentPage = 1;
        quantityPerPage = q;
        await LoadResult(currentPage, quantityPerPage, columnName, direction);
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadResult(currentPage, quantityPerPage, columnName, direction);
    }

    async Task LoadResult(int currentPage, int quantityPerPage, string columnName, string direction)
    {
        var sw = Stopwatch.StartNew();
        articleList = await ArticleController.ListAll();
        autorList = await AutorController.ListAll();
        count = articleList.Count();
        totalPagesQuantity = (int)Math.Ceiling(count / (decimal)quantityPerPage);

        result = articleList
            .Join(autorList, // второй набор
             p => p.AutorID, // свойство-селектор объекта из первого набора
             t => t.ID, // свойство-селектор объекта из второго набора
             (p, t) => new PageDataSet { ID = p.ID, Title = p.Title, Autor = t.Name });

        result = result
            .OrderByWithDirection(columnName, direction)
            .Skip((currentPage - 1) * quantityPerPage)
            .Take(quantityPerPage);
        sw.Stop();
        elapsed = sw.ElapsedMilliseconds;
    }

    private async Task OrderByColumn(string c)
    {
        columnName = c;
        currentPage = 1;

        if (sortColumnName != columnName)
        {
            sortColumnName = columnName;
            direction = "ASC";
        }
        else
        {
            if (direction == "ASC")
            {
                direction = "DESC";
            }
            else
            {
                direction = "ASC";
            }

        }

        await LoadResult(currentPage, quantityPerPage, sortColumnName, direction);
    }

    private async Task Delete(int id)
    {
        await ArticleController.Delete(id);
        await OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("setTitle", "Статьи");
    }
}
