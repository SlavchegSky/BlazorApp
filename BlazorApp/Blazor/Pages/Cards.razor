@page "/cards"
@using System.IO
@using Blazor.Controller
@using Blazor.Models
@using Blazor.Extensions
@inject IArticleController ArticleController
@inject IAutorController AutorController
@inject IJSRuntime JSRuntime


<div class="container">

    <DropDownComponent Title="Показать записей" QuantityPerPage="quantityPerPage" DDItem="DDItem"
                       SetQuantityPerPage="SetQuantityPerPage"></DropDownComponent>

    <h3>Статьи @((currentPage - 1) * quantityPerPage + 1) - @((currentPage * quantityPerPage < count) ? currentPage * quantityPerPage : count) из @count</h3>

    <p>Страница @currentPage из @totalPagesQuantity</p>

    <Pagination TotalPagesQuantity="totalPagesQuantity" CurrentPage="currentPage" Radius="3"
                SelectedPage="SelectedPage"></Pagination>

    <table class="table table-hover">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Сортировка ==>></th>
                <th scope="col" @onclick="@(()=>OrderByColumn("Title"))">
                    Название
                    <span class="oi @((sortColumnName == "Title") ? ((direction == "ASC") ? "oi-sort-ascending" : "oi-sort-descending") : null)"></span>
                </th>
                <th scope="col" @onclick="@(()=>OrderByColumn("Autor"))">
                    Автор
                    <span class="oi @((sortColumnName == "Autor") ? ((direction == "ASC") ? "oi-sort-ascending" : "oi-sort-descending") : null)"></span>
                </th>
            </tr>
        </thead>
    </table>

    <div class="container-fluid">
        <div class="row">
            @foreach (var item in result)
            {

                <div class="card" style="width: 18rem; margin: 1rem;">
                    <div class="card-header">
                        @item.Autor
                    <button @onclick="@(()=>Delete(item.ID))" type="button" class="btn btn-link" style="float: right;">X</button>
                </div>
                <div class="card-body">
                    <h5 class="card-title">@item.Title</h5>
                    <p class="card-text">@((MarkupString)item.Text.Remove(100))...</p>
                    <a href="/article/@item.ID" class="btn btn-primary">Читать</a>
                </div>
            </div>
        }
        </div>
    </div>
</div>

@code {
    private List<Article> articleList;
    private List<Autor> autorList;
    private int[] DDItem = { 6, 12, 24, 48, 90 };
    private string columnName = "Title";
    private int quantityPerPage = 6;
    private string sortColumnName;
    private string direction;
    private int count;
    private int totalPagesQuantity;
    private int currentPage = 1;
    private IEnumerable<PageDataSet> result;

    public class PageDataSet
    {
        public int ID { get; set; }
        public string Title { get; set; }
        public string Text { get; set; }
        public string Autor { get; set; }

    }

    protected override async Task OnInitializedAsync()
    {
        await LoadResult();

    }

    private async Task SetQuantityPerPage(int q)
    {
        currentPage = 1;
        quantityPerPage = q;
        await LoadResult(1, quantityPerPage, columnName, direction);
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadResult(page, quantityPerPage, columnName, direction);
    }

    async Task LoadResult(int page = 1, int quantityPerPage = 6, string columnName = "Title", string direction = "ASC")
    {
        articleList = await ArticleController.ListAll();
        autorList = await AutorController.ListAll();
        count = articleList.Count();
        totalPagesQuantity = (int)Math.Ceiling(count / (decimal)quantityPerPage);

        result = (IEnumerable<PageDataSet>)articleList
            .Join(autorList, // второй набор
             p => p.AutorID, // свойство-селектор объекта из первого набора
             t => t.ID, // свойство-селектор объекта из второго набора
             (p, t) => new PageDataSet { ID = p.ID, Title = p.Title, Text = p.ArticleText, Autor = t.Name });

        result = result
            .OrderByWithDirection(columnName, direction)
            .Skip((page - 1) * quantityPerPage)
            .Take(quantityPerPage);

    }

    private async Task OrderByColumn(string c)
    {
        columnName = c;
        currentPage = 1;

        if (sortColumnName != columnName)
        {
            sortColumnName = columnName;
            direction = "ASC";
        }
        else
        {
            if (direction == "ASC")
            {
                direction = "DESC";
            }
            else
            {
                direction = "ASC";
            }

        }

        await LoadResult(currentPage, quantityPerPage, sortColumnName, direction);
    }

    private async Task Delete(int id)
    {
        await ArticleController.Delete(id);
        await OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("setTitle", "Карточки");
    }
}
