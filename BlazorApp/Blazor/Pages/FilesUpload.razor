@page "/filesupload"
@inject IJSRuntime JSRuntime
@inject UploadFilesController UploadFile

<div class="container">
    <h3>Загрузка файлов</h3>

    <InputFile OnChange="HandleSelection" />

    <br><br>

    @if (file != null)
    {
        <p>Name: @file.Name</p>
        <p>Size: @file.Size</p>
        <p>Type: @file.Type</p>
        <p>Data: @file.LastModified</p>
        <p>Status: @status</p><br><br>
    }

    <div class="row">
        @if (files != null)
        {
            foreach (var item in files)
            {
                <div class="card" style="width: 18rem;">
                    <img src="/upload/images_min/@item.Name" class="card-img-top" alt="...">
                    <div class="card-body">
                        <p class="card-text">@item.Id - @item.Path</p>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
#nullable enable

    public string? status;
    public IFileListEntry? file;
    public List<FileModel>? files;

    protected override async Task OnInitializedAsync()
    {
        files = await UploadFile.ListAll();

    }

    private async Task HandleSelection(IFileListEntry[] fileEntry)
    {
        file = fileEntry.FirstOrDefault();
        status = "Загружается файл";

        if (file != null)
        {
            // Just load into .NET memory to show it can be done
            // Alternatively it could be saved to disk, or parsed in memory, or similar
            //var ms = new MemoryStream();
            //await file.Data.CopyToAsync(ms);

            if (await UploadFile.UploadAsync(file))
            {
                status = $"Finished loading {file.Size} bytes from {file.Name}";
                await OnInitializedAsync();
            }
            else
            {
                status = "Что-то пошло не так";
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("setTitle", "Загрузка файлов");
    }

}
